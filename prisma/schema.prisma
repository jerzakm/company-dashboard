// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(cuid())
  login           String           @unique
  name            String
  password        String
  email           String?
  phone           String?
  permissions     Permissions[]
  created_at      DateTime         @default(now())
  returnEvents    ReturnEvent[]
  returnNotes     ReturnNote[]
  returnLocations ReturnLocation[]
  returnImages    ReturnImage[]
  applicationLogs ApplicationLog[]
  active          Boolean          @default(false)
}

model Permissions {
  id          String @id @default(cuid())
  name        String
  description String
  users       User[]

  @@map("Role")
}

model ReturnEntry {
  id           Int             @id @default(autoincrement())
  created_at   DateTime        @default(now())
  isBusiness   Boolean?
  saleDocument String?
  saleSource   SaleSource?     @relation(fields: [saleSourceId], references: [id])
  saleSourceId String?
  resolved     Boolean
  sender       ReturnSender?
  events       ReturnEvent[]
  notes        ReturnNote[]
  products     ReturnProduct[]
  images       ReturnImage[]
  returnReason ReturnReason[]
}

model ReturnSender {
  id       String      @id @default(cuid())
  name     String
  phone    String
  postCode String
  street   String
  city     String
  country  String
  return   ReturnEntry @relation(fields: [returnId], references: [id])
  returnId Int         @unique
}

model ReturnEvent {
  id          String      @id @default(cuid())
  type        String
  description String
  created_at  DateTime    @default(now())
  userId      String
  diff        String?
  user        User        @relation(fields: [userId], references: [id])
  returnId    Int
  returnEntry ReturnEntry @relation(fields: [returnId], references: [id])
}

model ReturnNote {
  id          String      @id @default(cuid())
  type        String
  content     String
  created_at  DateTime    @default(now())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  returnId    Int
  returnEntry ReturnEntry @relation(fields: [returnId], references: [id])
}

model PhysicalLocation {
  id       String           @id @default(cuid())
  name     String
  subName  String
  products ReturnLocation[]
}

model ReturnLocation {
  id           String           @id @default(cuid())
  description  String
  created_at   DateTime         @default(now())
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  product      ReturnProduct?   @relation(fields: [productId], references: [id])
  productId    String           @unique
  locationInfo PhysicalLocation @relation(fields: [locationId], references: [id])
  locationId   String
}

model ReturnProduct {
  id          String          @id @default(cuid())
  name        String
  symbol      String
  price       Decimal
  quantity    Int
  group       String
  description String
  returnId    Int
  returnEntry ReturnEntry     @relation(fields: [returnId], references: [id])
  location    ReturnLocation?
}

model ReturnImage {
  id          String      @id @default(cuid())
  imgSrc      String
  description String
  created_at  DateTime    @default(now())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  returnId    Int
  returnEntry ReturnEntry @relation(fields: [returnId], references: [id])
}

model ReturnReason {
  id          String        @id @default(cuid())
  reason      String
  description String
  returnEntry ReturnEntry[]
}

model SaleSource {
  id          String        @id @default(cuid())
  name        String
  subCategory String?
  returnEntry ReturnEntry[]
}

model ApplicationLog {
  id          String   @id @default(cuid())
  created_at  DateTime @default(now())
  status      String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Product {
  id        String  @id @default(cuid())
  subiektId Decimal @unique
  symbol    String
  name      String
  isSet     Boolean
  volume    Decimal
  weight    Decimal
  buyPrice  Decimal
  group     String
}
